package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ReportAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportAllPropertiesEquals(Report expected, Report actual) {
        assertReportAutoGeneratedPropertiesEquals(expected, actual);
        assertReportAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportAllUpdatablePropertiesEquals(Report expected, Report actual) {
        assertReportUpdatableFieldsEquals(expected, actual);
        assertReportUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportAutoGeneratedPropertiesEquals(Report expected, Report actual) {
        assertThat(expected)
            .as("Verify Report auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportUpdatableFieldsEquals(Report expected, Report actual) {
        assertThat(expected)
            .as("Verify Report relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getSampleReportId()).as("check sampleReportId").isEqualTo(actual.getSampleReportId()))
            .satisfies(e -> assertThat(e.getTestOfObject()).as("check testOfObject").isEqualTo(actual.getTestOfObject()))
            .satisfies(e -> assertThat(e.getChecker()).as("check checker").isEqualTo(actual.getChecker()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getFrequency()).as("check frequency").isEqualTo(actual.getFrequency()))
            .satisfies(e -> assertThat(e.getReportType()).as("check reportType").isEqualTo(actual.getReportType()))
            .satisfies(e -> assertThat(e.getReportTypeId()).as("check reportTypeId").isEqualTo(actual.getReportTypeId()))
            .satisfies(
                e ->
                    assertThat(e.getCreatedAt())
                        .as("check createdAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(
                e ->
                    assertThat(e.getUpdatedAt())
                        .as("check updatedAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getUpdatedAt())
            )
            .satisfies(e -> assertThat(e.getScoreScale()).as("check scoreScale").isEqualTo(actual.getScoreScale()))
            .satisfies(e -> assertThat(e.getUpdateBy()).as("check updateBy").isEqualTo(actual.getUpdateBy()))
            .satisfies(e -> assertThat(e.getPlanId()).as("check planId").isEqualTo(actual.getPlanId()))
            .satisfies(e -> assertThat(e.getUser()).as("check user").isEqualTo(actual.getUser()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportUpdatableRelationshipsEquals(Report expected, Report actual) {}
}
