package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class PlanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanAllPropertiesEquals(Plan expected, Plan actual) {
        assertPlanAutoGeneratedPropertiesEquals(expected, actual);
        assertPlanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanAllUpdatablePropertiesEquals(Plan expected, Plan actual) {
        assertPlanUpdatableFieldsEquals(expected, actual);
        assertPlanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanAutoGeneratedPropertiesEquals(Plan expected, Plan actual) {
        assertThat(expected)
            .as("Verify Plan auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanUpdatableFieldsEquals(Plan expected, Plan actual) {
        assertThat(expected)
            .as("Verify Plan relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(
                e ->
                    assertThat(e.getSubjectOfAssetmentPlan())
                        .as("check subjectOfAssetmentPlan")
                        .isEqualTo(actual.getSubjectOfAssetmentPlan())
            )
            .satisfies(e -> assertThat(e.getFrequency()).as("check frequency").isEqualTo(actual.getFrequency()))
            .satisfies(
                e ->
                    assertThat(e.getTimeStart())
                        .as("check timeStart")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getTimeStart())
            )
            .satisfies(
                e -> assertThat(e.getTimeEnd()).as("check timeEnd").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getTimeEnd())
            )
            .satisfies(e -> assertThat(e.getStatusPlan()).as("check statusPlan").isEqualTo(actual.getStatusPlan()))
            .satisfies(e -> assertThat(e.getTestObject()).as("check testObject").isEqualTo(actual.getTestObject()))
            .satisfies(e -> assertThat(e.getReportTypeId()).as("check reportTypeId").isEqualTo(actual.getReportTypeId()))
            .satisfies(e -> assertThat(e.getReportTypeName()).as("check reportTypeName").isEqualTo(actual.getReportTypeName()))
            .satisfies(e -> assertThat(e.getNumberOfCheck()).as("check numberOfCheck").isEqualTo(actual.getNumberOfCheck()))
            .satisfies(e -> assertThat(e.getImplementer()).as("check implementer").isEqualTo(actual.getImplementer()))
            .satisfies(e -> assertThat(e.getPaticipant()).as("check paticipant").isEqualTo(actual.getPaticipant()))
            .satisfies(e -> assertThat(e.getCheckerGroup()).as("check checkerGroup").isEqualTo(actual.getCheckerGroup()))
            .satisfies(e -> assertThat(e.getCheckerName()).as("check checkerName").isEqualTo(actual.getCheckerName()))
            .satisfies(e -> assertThat(e.getCheckerGroupId()).as("check checkerGroupId").isEqualTo(actual.getCheckerGroupId()))
            .satisfies(e -> assertThat(e.getCheckerId()).as("check checkerId").isEqualTo(actual.getCheckerId()))
            .satisfies(e -> assertThat(e.getGross()).as("check gross").isEqualTo(actual.getGross()))
            .satisfies(e -> assertThat(e.getTimeCheck()).as("check timeCheck").isEqualTo(actual.getTimeCheck()))
            .satisfies(e -> assertThat(e.getNameResult()).as("check nameResult").isEqualTo(actual.getNameResult()))
            .satisfies(e -> assertThat(e.getScriptId()).as("check scriptId").isEqualTo(actual.getScriptId()))
            .satisfies(e -> assertThat(e.getCreateBy()).as("check createBy").isEqualTo(actual.getCreateBy()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(
                e ->
                    assertThat(e.getCreatedAt())
                        .as("check createdAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(
                e ->
                    assertThat(e.getUpdatedAt())
                        .as("check updatedAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getUpdatedAt())
            )
            .satisfies(e -> assertThat(e.getUpdateBy()).as("check updateBy").isEqualTo(actual.getUpdateBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanUpdatableRelationshipsEquals(Plan expected, Plan actual) {}
}
