package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class SampleReportCriteriaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSampleReportCriteriaAllPropertiesEquals(SampleReportCriteria expected, SampleReportCriteria actual) {
        assertSampleReportCriteriaAutoGeneratedPropertiesEquals(expected, actual);
        assertSampleReportCriteriaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSampleReportCriteriaAllUpdatablePropertiesEquals(SampleReportCriteria expected, SampleReportCriteria actual) {
        assertSampleReportCriteriaUpdatableFieldsEquals(expected, actual);
        assertSampleReportCriteriaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSampleReportCriteriaAutoGeneratedPropertiesEquals(SampleReportCriteria expected, SampleReportCriteria actual) {
        assertThat(expected)
            .as("Verify SampleReportCriteria auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSampleReportCriteriaUpdatableFieldsEquals(SampleReportCriteria expected, SampleReportCriteria actual) {
        assertThat(expected)
            .as("Verify SampleReportCriteria relevant properties")
            .satisfies(e -> assertThat(e.getCriteriaName()).as("check criteriaName").isEqualTo(actual.getCriteriaName()))
            .satisfies(e -> assertThat(e.getCriteriaGroupName()).as("check criteriaGroupName").isEqualTo(actual.getCriteriaGroupName()))
            .satisfies(e -> assertThat(e.getCriteriaId()).as("check criteriaId").isEqualTo(actual.getCriteriaId()))
            .satisfies(e -> assertThat(e.getCriteriaGroupId()).as("check criteriaGroupId").isEqualTo(actual.getCriteriaGroupId()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(
                e ->
                    assertThat(e.getCreatedAt())
                        .as("check createdAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(
                e ->
                    assertThat(e.getUpdatedAt())
                        .as("check updatedAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getUpdatedAt())
            )
            .satisfies(e -> assertThat(e.getUpdateBy()).as("check updateBy").isEqualTo(actual.getUpdateBy()))
            .satisfies(e -> assertThat(e.getFrequency()).as("check frequency").isEqualTo(actual.getFrequency()))
            .satisfies(e -> assertThat(e.getSampleReportId()).as("check sampleReportId").isEqualTo(actual.getSampleReportId()))
            .satisfies(e -> assertThat(e.getDetail()).as("check detail").isEqualTo(actual.getDetail()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSampleReportCriteriaUpdatableRelationshipsEquals(SampleReportCriteria expected, SampleReportCriteria actual) {}
}
