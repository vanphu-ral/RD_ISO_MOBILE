package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ReportCriteriaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportCriteriaAllPropertiesEquals(ReportCriteria expected, ReportCriteria actual) {
        assertReportCriteriaAutoGeneratedPropertiesEquals(expected, actual);
        assertReportCriteriaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportCriteriaAllUpdatablePropertiesEquals(ReportCriteria expected, ReportCriteria actual) {
        assertReportCriteriaUpdatableFieldsEquals(expected, actual);
        assertReportCriteriaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportCriteriaAutoGeneratedPropertiesEquals(ReportCriteria expected, ReportCriteria actual) {
        assertThat(expected)
            .as("Verify ReportCriteria auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportCriteriaUpdatableFieldsEquals(ReportCriteria expected, ReportCriteria actual) {
        assertThat(expected)
            .as("Verify ReportCriteria relevant properties")
            .satisfies(e -> assertThat(e.getCriteriaName()).as("check criteriaName").isEqualTo(actual.getCriteriaName()))
            .satisfies(e -> assertThat(e.getCriteriaGroupName()).as("check criteriaGroupName").isEqualTo(actual.getCriteriaGroupName()))
            .satisfies(e -> assertThat(e.getCriteriaId()).as("check criteriaId").isEqualTo(actual.getCriteriaId()))
            .satisfies(e -> assertThat(e.getCriteriaGroupId()).as("check criteriaGroupId").isEqualTo(actual.getCriteriaGroupId()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(
                e ->
                    assertThat(e.getCreatedAt())
                        .as("check createdAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(
                e ->
                    assertThat(e.getUpdatedAt())
                        .as("check updatedAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getUpdatedAt())
            )
            .satisfies(e -> assertThat(e.getUpdateBy()).as("check updateBy").isEqualTo(actual.getUpdateBy()))
            .satisfies(e -> assertThat(e.getFrequency()).as("check frequency").isEqualTo(actual.getFrequency()))
            .satisfies(e -> assertThat(e.getReportId()).as("check reportId").isEqualTo(actual.getReportId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportCriteriaUpdatableRelationshipsEquals(ReportCriteria expected, ReportCriteria actual) {}
}
