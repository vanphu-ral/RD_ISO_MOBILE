package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class CheckTargetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckTargetAllPropertiesEquals(CheckTarget expected, CheckTarget actual) {
        assertCheckTargetAutoGeneratedPropertiesEquals(expected, actual);
        assertCheckTargetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckTargetAllUpdatablePropertiesEquals(CheckTarget expected, CheckTarget actual) {
        assertCheckTargetUpdatableFieldsEquals(expected, actual);
        assertCheckTargetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckTargetAutoGeneratedPropertiesEquals(CheckTarget expected, CheckTarget actual) {
        assertThat(expected)
            .as("Verify CheckTarget auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckTargetUpdatableFieldsEquals(CheckTarget expected, CheckTarget actual) {
        assertThat(expected)
            .as("Verify CheckTarget relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getInspectionTarget()).as("check inspectionTarget").isEqualTo(actual.getInspectionTarget()))
            .satisfies(e -> assertThat(e.getEvaluationLevelId()).as("check evaluationLevelId").isEqualTo(actual.getEvaluationLevelId()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(
                e ->
                    assertThat(e.getCreatedAt())
                        .as("check createdAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(
                e ->
                    assertThat(e.getUpdatedAt())
                        .as("check updatedAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getUpdatedAt())
            )
            .satisfies(e -> assertThat(e.getUpdateBy()).as("check updateBy").isEqualTo(actual.getUpdateBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckTargetUpdatableRelationshipsEquals(CheckTarget expected, CheckTarget actual) {}
}
