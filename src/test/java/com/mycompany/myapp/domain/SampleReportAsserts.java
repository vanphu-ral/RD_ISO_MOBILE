package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class SampleReportAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSampleReportAllPropertiesEquals(SampleReport expected, SampleReport actual) {
        assertSampleReportAutoGeneratedPropertiesEquals(expected, actual);
        assertSampleReportAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSampleReportAllUpdatablePropertiesEquals(SampleReport expected, SampleReport actual) {
        assertSampleReportUpdatableFieldsEquals(expected, actual);
        assertSampleReportUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSampleReportAutoGeneratedPropertiesEquals(SampleReport expected, SampleReport actual) {
        assertThat(expected)
            .as("Verify SampleReport auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSampleReportUpdatableFieldsEquals(SampleReport expected, SampleReport actual) {
        assertThat(expected)
            .as("Verify SampleReport relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(
                e ->
                    assertThat(e.getCreatedAt())
                        .as("check createdAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(
                e ->
                    assertThat(e.getUpdatedAt())
                        .as("check updatedAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getUpdatedAt())
            )
            .satisfies(e -> assertThat(e.getUpdateBy()).as("check updateBy").isEqualTo(actual.getUpdateBy()))
            .satisfies(e -> assertThat(e.getFrequency()).as("check frequency").isEqualTo(actual.getFrequency()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getReportType()).as("check reportType").isEqualTo(actual.getReportType()))
            .satisfies(e -> assertThat(e.getReportTypeId()).as("check reportTypeId").isEqualTo(actual.getReportTypeId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSampleReportUpdatableRelationshipsEquals(SampleReport expected, SampleReport actual) {}
}
